/*
    Copyright (C) 2006 by OXIM TEAM

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

#ifdef HAVE_CONFIG_H
#  include "config.h"
#endif

#include <stdlib.h>
#include <string.h>
#include <X11/Xlib.h>
#include <X11/keysym.h>
#include <X11/Xutil.h>
#include <X11/Xos.h>
#include <X11/xpm.h>
#include <X11/extensions/XInput.h>
#include <X11/extensions/XTest.h>
#include <X11/extensions/shape.h>
#include <string.h>
#include <signal.h>
#include "oximtool.h"
#include "gui.h"
#include "oxim.h"
#include "module.h"

#define X_LEADING       2
#define Y_LEADING       2
#define BUFLEN		1024

/*-------------------------------------------------------------------*/
enum point_type {
        POINT_NONE=0, /* 不在任何控制區內 */
        POINT_TITLE,  /* 游標在標題列 */
        POINT_CLOSE,  /* 游標在關閉按鈕 */
	POINT_KEY     /* 按鍵 */
};

typedef struct {
        int type;
        int index;
} point_t;

typedef struct {
	KeyCode  code;
	KeySym   sym;
	char     ascii;      /* 按鍵值 */
	int	 etymon_idx; /* 字根索引 */
	XSegment segment;    /* 按鈕座標 */
} btn_t;

typedef struct {
	XSegment title;  /* 標題列座標 */
	XSegment close;  /* 關閉按鈕的座標 */
	unsigned int modifiter;
	unsigned int NumberOfKey;
	btn_t **btns;
} key_map;

/*-------------------------------------------------------------------*/
static int keyboard_actived = False;
static key_map keymap;
static uch_t *save_etymon_list = NULL;
#define IDX 5
static int control_keys_idx[IDX] = {0,0,0,0,0};
/*-------------------------------------------------------------------*/

static int ConvertSegment(char *value, XSegment *seg)
{
    char cmd[BUFLEN];
    int idx = 0;
    int valid = True;

    bzero(seg, sizeof(XSegment));
    while(valid && oxim_get_word(&value, cmd, BUFLEN, ","))
    {
	if (cmd[0] != ',' && idx < 4)
	{
	    switch (idx)
	    {
		case 0: /* x1 */
		    seg->x1 = atoi(cmd);
		    break;
		case 1: /* y1 */
		    seg->y1 = atoi(cmd);
		    break;
		case 2: /* x2 */
		    seg->x2 = atoi(cmd);
		    break;
		case 3: /* y2 */
		    seg->y2 = atoi(cmd);
		    break;
	    }
	    idx ++;
	}

    }

    if (seg->x1 > seg->x2 || seg->y1 > seg->y2)
	valid = False;

    if (seg->x1 == seg->y1 == seg->x2 == seg->y2)
	valid = False;

    return valid;
}

static int ParseSetting(char *s)
{
    winlist_t *win = gui->keyboard_win;
    char cmd[BUFLEN];
    int  idx = 0;
    int  isok = 0;
    XSegment seg;
    KeySym ksym;

    set_item_t *set_item = oxim_get_key_value(s);
    if (set_item)
    {
	if (strcasecmp(set_item->key, "font-size") == 0) /* 設定字型大小 */
	{
	    int size = atoi(set_item->value);
	    if (size != 0)
		win->font_size = size;
	    isok = 1;
	}
	else if (strcasecmp(set_item->key, "title-area") == 0) /* 標題區塊 */
	{
	    if ((isok = ConvertSegment(set_item->value, &seg)))
	    {
		keymap.title.x1 = seg.x1;
		keymap.title.y1 = seg.y1;
		keymap.title.x2 = seg.x2;
		keymap.title.y2 = seg.y2;
	    }
	}
	else if (strcasecmp(set_item->key, "close-button") == 0) /* 關閉按鈕區塊 */
	{
	    if ((isok = ConvertSegment(set_item->value, &seg)))
	    {
		keymap.close.x1 = seg.x1;
		keymap.close.y1 = seg.y1;
		keymap.close.x2 = seg.x2;
		keymap.close.y2 = seg.y2;
	    }
	}
	else if ((ksym = searchKeySymByName(set_item->key)) != 0) /* 按鍵區塊 */
	{
	    btn_t *btn = oxim_malloc(sizeof(btn_t), True);
	    /* 轉換座標 */
	    isok = ConvertSegment(set_item->value, &seg);
	    if (!isok)
	    {
		free(btn);
	    }
	    else
	    {
		keymap.NumberOfKey ++;
		if (keymap.NumberOfKey == 1)
		{
		    keymap.btns = (btn_t **)oxim_malloc(sizeof(btn_t *), False);
		}
		else
		{
		    keymap.btns = (btn_t **)oxim_realloc(keymap.btns, sizeof(btn_t *) * keymap.NumberOfKey);
		}
		keymap.btns[keymap.NumberOfKey-1] = btn;
		btn->sym = ksym;
		btn->code = XKeysymToKeycode(gui->display, ksym);
		btn->segment.x1 = seg.x1;
		btn->segment.y1 = seg.y1;
		btn->segment.x2 = seg.x2;
		btn->segment.y2 = seg.y2;
		if (strlen(set_item->key) == 1)
		{
		    btn->ascii = set_item->key[0];
		    btn->etymon_idx = oxim_key2code(set_item->key[0]);
		}
	    }
	}
	else
	{
	    printf(N_("Unknown tag : '%s'\n"), set_item->key);
	    isok = False;
	}
	oxim_key_value_destroy(set_item);
    }

    return isok;
}

static int KeyboardInit(void)
{
    winlist_t *win = gui->keyboard_win;
    char *buf = oxim_malloc(BUFLEN, False);
    char *true_fn = oxim_malloc(BUFLEN, False);
    char *sub_path = "panels";
    int ret = False;

    /* 檢查並載入鍵盤圖片與設定檔 */
    if (oxim_check_datafile("defaultkeyboard.xpm", sub_path, true_fn, 256) == True)
    {
	/* 讀進鍵盤圖片 */
	Pixmap keyboard, mask;
	XpmAttributes attributes;
	attributes.valuemask = 0;
	int status;
	status =XpmReadFileToPixmap(gui->display, win->window, true_fn,
				&keyboard, &mask, &attributes);
	/* 圖形載入成功 */
	if (status == 0)
 	{
	    /* 設定長寬 */
	    win->width  = attributes.width;
	    win->height = attributes.height;

	    /* 設定鍵盤為視窗背景 */
	    XSetWindowBackgroundPixmap(gui->display, win->window, keyboard);
	    if (mask)
	    {
		XShapeCombineMask(gui->display, win->window,
			ShapeBounding, 0, 0, mask, ShapeSet);
	    }
	    /* 重設視窗大小 */
	    XResizeWindow(gui->display, win->window, win->width, win->height);
	    /* 釋放記憶體 */
	    XpmFreeAttributes(&attributes);
	    XFreePixmap(gui->display, keyboard);
	    if (mask)
	    {
		XFreePixmap(gui->display, mask);
	    }
	    ret = True;
	}
    }

    /* 圖片載入成功的話，繼續處理設定檔 */
    if (ret && oxim_check_datafile("defaultkeyboard.conf", sub_path, true_fn, 256) == True)
    {
	int line_no = 0;
	gzFile *fp = NULL;
	fp = oxim_open_file(true_fn, "r", OXIMMSG_WARNING);
	if (fp)
	{
	    /* 讀入設定檔並分析 */
	    while (oxim_get_line(buf, BUFLEN, fp, &line_no, "#\r\n"))
	    {
		if (!ParseSetting(buf))
		{
		    printf(N_("%s line %d invalid !\n"), true_fn, line_no, buf);
		}
	    }
	    gzclose(fp); /* 關閉檔案 */
	}
	else
	{
	    ret = False;
	}
    }
    else
    {
	ret = False;
    }
   
    free(true_fn);
    free(buf);

    return ret;
}

int gui_keyboard_actived(void)
{
    return keyboard_actived;
}

void gui_switch_keyboard(void)
{
    if (keyboard_actived)
	gui_hide_keyboard();
    else
	gui_show_keyboard();
}

void gui_hide_keyboard(void)
{
    int i;
    gui_winmap_change(gui->keyboard_win, 0);
    keyboard_actived = False;

    if (keymap.btns)
    {
	for (i = 0 ; i < keymap.NumberOfKey; i++)
	{
	    free(keymap.btns[i]);
	}
	free(keymap.btns);
	keymap.btns = NULL;
    }
}

void gui_show_keyboard(void)
{
    winlist_t *win = gui->keyboard_win;
    xccore_t *xccore = win->data;

    bzero(&keymap, sizeof(key_map));

    if (!KeyboardInit())
    {
	printf(_("Read keyboard setting error!!\n"));
	return;
    }

    gui_winmap_change(win, 1);

    keyboard_actived = True;
}

static point_t CheckPoint(int x, int y)
{
    winlist_t *win = gui->symbol_win;
    btn_t **btns = keymap.btns;
    point_t pt;

    pt.type = POINT_NONE;

    /* 是否在 Title bar */
    if (x > keymap.title.x1 && x < keymap.title.x2 &&
	y > keymap.title.y1 && y < keymap.title.y2)
    {
	pt.type = POINT_TITLE;
	return pt;
    }
    /* 是否在關閉按鈕 ? */
    if (x > keymap.close.x1 && x < keymap.close.x2 &&
	y > keymap.close.y1 && y < keymap.close.y2)
    {
	pt.type = POINT_CLOSE;
	return pt;
    }

    /* 是否在按鈕上 ? */
    int i;
    for (i = 0 ; i < keymap.NumberOfKey ; i++)
    {
	if (x >= btns[i]->segment.x1 && x <= btns[i]->segment.x2 &&
	    y >= btns[i]->segment.y1 && y <= btns[i]->segment.y2)
	{
	    pt.type = POINT_KEY;
	    pt.index = i;
	    return pt;
	}
    }

    return pt;
}

static void gui_keyboard_set(uch_t *etymon_list, int force)
{
    if (etymon_list && etymon_list == save_etymon_list && !force)
    {
	return;
    }

    winlist_t *win = gui->keyboard_win;
    btn_t **btns = keymap.btns;

    XClearWindow(gui->display, win->window); /* 清除字根 */
    char *title = _("Open X Input Method Mini Keyboard");
    gui_Draw_String(win, LIGHT_COLOR, NO_COLOR, keymap.title.x1+3, keymap.title.y2-3, title, strlen(title));
    if (etymon_list)
    {
	int i, len, etymon_w, x, y;
	uch_t etymon;
	for (i=0; i < keymap.NumberOfKey ; i++)
	{
	    if (btns[i]->ascii != 0)
	    {
		etymon = etymon_list[btns[i]->etymon_idx];
		len = strlen((char *)etymon.s);
		if (len)
		{
		    etymon_w = gui_TextEscapement(win, (char *)etymon.s, len);
		    x = btns[i]->segment.x2 - etymon_w - 1;
		    y = btns[i]->segment.y2 - 3;
		    gui_Draw_String(win, FONT_COLOR, NO_COLOR, x+1, y+1, (char *)etymon.s, len);
		    gui_Draw_String(win, LIGHT_COLOR, NO_COLOR, x, y, (char *)etymon.s, len);
		}
	    }
	}
    }
    save_etymon_list = etymon_list;

/*    int i;
    GC gc = XCreateGC(gui->display, win->window, 0, NULL);
    XSetForeground(gui->display, gc, 20);
    XSetPlaneMask(gui->display, gc, 255);
    if(gui_get_led_state(XK_Caps_Lock))
    {
	for(i=0; i<keymap.NumberOfKey ; i++)
	{
	    XSegment segment = keymap.btns[i]->segment;
	    int width = segment.x2 - segment.x1;
	    int height = segment.y2 - segment.y1;
	    KeySym ksym = keymap.btns[i]->sym;
	    
	    if( ksym==XK_Caps_Lock )
	    {
		XFillRectangle(gui->display, win->window, gc, segment.x1, segment.y1, width, height);
		break;
	    }
	}
    }
    XFreeGC(gui->display, gc);*/
}

// a singal funciton for mouse-forcus event 
// to redraw the draw context
/*static */void 
gui_keyboard_refresh(int sig)
{
    winlist_t *win = gui->keyboard_win;
    xccore_t *xccore = (xccore_t *)win->data;
    IC *ic = xccore->ic;
    inp_state_t inp_state = (ic) ? ic->imc->inp_state : 0;
    
    if (!keyboard_actived || (win->winmode & WMODE_EXIT) || !ic)
	return;
    if (!(inp_state & IM_CINPUT))
	gui_keyboard_set(NULL, True);
    else
	gui_keyboard_set(ic->imc->inpinfo.etymon_list, True);
}

// an overloading funciton 'alarm'
// for advance assign micro-second
/*static */unsigned int
call_alarm (unsigned int seconds, unsigned int mseconds)
{
    struct itimerval old, new;
    new.it_interval.tv_usec = 0;
    new.it_interval.tv_sec = 0;
    new.it_value.tv_usec = (long int) mseconds;
    new.it_value.tv_sec = (long int) seconds;
    if (setitimer (ITIMER_REAL, &new, &old) < 0)
	return 0;
    else
	return old.it_value.tv_sec;
}

static void
draw_focus_funckeys(int clear)
{
    winlist_t *win = gui->keyboard_win;
    GC gc = XCreateGC(gui->display, win->window, 0, NULL);
    int i;
    
    gui_keyboard_refresh(0);
    
    XSetForeground(gui->display, gc, 20);
    XSetPlaneMask(gui->display, gc, 255);
    for(i=0; (i<IDX && control_keys_idx[i]>0); i++)
    {
	XSegment segment = keymap.btns[control_keys_idx[i]]->segment;
	int width = segment.x2 - segment.x1;
	int height = segment.y2 - segment.y1;
	
	XFillRectangle(gui->display, win->window, gc, segment.x1, segment.y1, width, height);
	if(clear && keymap.btns[control_keys_idx[i]]->sym!=XK_Caps_Lock)
	    control_keys_idx[i] = 0;
    }
    XFreeGC(gui->display, gc);
}

// draw the focus image while mouse click on some keyboard layout
static void 
draw_focus_key(XSegment segment)
{
    winlist_t *win = gui->keyboard_win;
    GC gc = XCreateGC(gui->display, win->window, 0, NULL);
    int width = segment.x2 - segment.x1;
    int height = segment.y2 - segment.y1;
    int i;

    gui_keyboard_refresh(0);
    
    XSetForeground(gui->display, gc, 20);
    XSetPlaneMask(gui->display, gc, 255);
    // draw focus of function keys
    draw_focus_funckeys(True);
    // draw focus of key
    XFillRectangle(gui->display, win->window, gc, segment.x1, segment.y1, width, height);

    XFreeGC(gui->display, gc);
    {
	signal(SIGALRM, gui_keyboard_refresh);
	call_alarm(0, 200000);
    }
//     draw_focus_funckeys(True);
}

static void
gui_keyboard_draw(winlist_t *win)
{
    puts("keyboard_draw");
    xccore_t *xccore = (xccore_t *)win->data;
    IC *ic = xccore->ic;
    inp_state_t inp_state = (ic) ? ic->imc->inp_state : 0;

    if (!keyboard_actived || (win->winmode & WMODE_EXIT) || !ic)
	return;

    /* 清除字根 */
    if (!(inp_state & IM_CINPUT))
    {
	gui_keyboard_set(NULL, False);
    }
    else
    {
	gui_keyboard_set(ic->imc->inpinfo.etymon_list, False);
    }
}

static void KeyboardEventProcess(winlist_t *win, XEvent *event)
{
//     xccore_t *xccore = (xccore_t *)win->data;
//     IC *ic = xccore->ic;
//     inp_state_t inp_state = (ic) ? ic->imc->inp_state : 0;
    point_t pt;

    switch (event->type)
    {
	case Expose:
	    if (event->xexpose.count == 0)
	    {
// 		gui_keyboard_refresh(0);
		draw_focus_funckeys(False);
// 		draw_focus_key(keymap.btns[pt.index]->segment);
/*		if (!(inp_state & IM_CINPUT))
		    gui_keyboard_set(NULL, True);
		else
		    gui_keyboard_set(ic->imc->inpinfo.etymon_list, True);*/
	    }
	    break;
	case MotionNotify:
	    pt = CheckPoint(event->xbutton.x, event->xbutton.y);
	    switch (pt.type)
	    {
		case POINT_TITLE:
		    XDefineCursor(gui->display, win->window, gui_cursor_move);
		    break;
		case POINT_CLOSE:
		    XDefineCursor(gui->display, win->window, gui_cursor_hand);
		    break;
		case POINT_KEY:
		    XDefineCursor(gui->display, win->window, gui_cursor_hand);
		    break;
		default:
		    XDefineCursor(gui->display, win->window, gui_cursor_arrow);
	    }
	    break;
	case ButtonPress:
	    if (event->xbutton.button == Button1)
	    {
		pt = CheckPoint(event->xbutton.x, event->xbutton.y);
		switch (pt.type)
		{
		    case POINT_TITLE:
			gui_move_window(win);
			break;
		    case POINT_CLOSE:
			gui_hide_keyboard();
			break;
		    case POINT_KEY:
			{
			    /* 取得 LED 狀態 */
			    int i;
			    int caps_lock = gui_get_led_state(XK_Caps_Lock);
			    Window w = gui_get_input_focus();
			    if (w)
			    {
				KeySym ksym = keymap.btns[pt.index]->sym;
				char ascii = keymap.btns[pt.index]->ascii;
				int clear_modifiter = False;
				switch (ksym)
				{
				case XK_Shift_L:
				case XK_Shift_R:
				    keymap.modifiter |= ShiftMask;
				    for(i=0; (i<IDX && control_keys_idx[i]>0); i++);
				    control_keys_idx[i] = pt.index;
				    draw_focus_funckeys(False);
				    break;
				case XK_Control_L:
				case XK_Control_R:
				    keymap.modifiter |= ControlMask;
				    for(i=0; (i<IDX && control_keys_idx[i]>0); i++)
				    {
					KeySym csym = keymap.btns[ control_keys_idx[i] ]->sym;
					if( (csym==XK_Control_L && ksym==XK_Control_R) ||
					    (csym==XK_Control_R && ksym==XK_Control_L) )
					    break;
				    }
				    control_keys_idx[i] = pt.index;
				    draw_focus_funckeys(False);
				    break;
				case XK_Alt_L:
				case XK_Alt_R:
				    keymap.modifiter |= Mod1Mask;
				    for(i=0; (i<IDX && control_keys_idx[i]>0); i++)
				    {
					KeySym csym = keymap.btns[ control_keys_idx[i] ]->sym;
					if( (csym==XK_Alt_L && ksym==XK_Alt_R) ||
					    (csym==XK_Alt_R && ksym==XK_Alt_L) )
					    break;
				    }
				    control_keys_idx[i] = pt.index;
				    draw_focus_funckeys(False);
				    break;
				case XK_Caps_Lock:
				    XTestFakeKeyEvent(gui->display, XKeysymToKeycode(gui->display, ksym), True, CurrentTime);
				    XTestFakeKeyEvent(gui->display, XKeysymToKeycode(gui->display, ksym), False, CurrentTime);
				    gui_keyboard_refresh(0);
				    draw_focus_funckeys(False);				    
				    return;
				    break;
				default:
				    clear_modifiter = True;
// 				    draw_focus_key(keymap.btns[pt.index]->segment, False);
				}
				if (caps_lock && ascii >= 'a' && ascii <= 'z')
				    keymap.modifiter |= ShiftMask;

				gui_send_key(w, keymap.modifiter, ksym);
				if (clear_modifiter)
				{
				    keymap.modifiter = 0;
				    draw_focus_key(keymap.btns[pt.index]->segment);
				}
			    }
			}
			break;
		}
	    }
	    break;
    }
}


void gui_keyboard_init(void)
{
    winlist_t *win = NULL;

    if (gui->keyboard_win)
    {
	win = gui->keyboard_win;
    }
    else
    {
	win = gui_new_win();
    }

    win->pos_x = gui->display_width / 2;
    win->pos_y = gui->display_height / 2;
    win->width  = 1;
    win->height = 1;

    win->win_draw_func  = gui_keyboard_draw;
    win->win_event_func = KeyboardEventProcess;
    XSetWindowAttributes win_attr;
    win_attr.override_redirect = True;
    XChangeWindowAttributes(gui->display, win->window,
			CWOverrideRedirect, &win_attr);

    gui->keyboard_win = win;
}
